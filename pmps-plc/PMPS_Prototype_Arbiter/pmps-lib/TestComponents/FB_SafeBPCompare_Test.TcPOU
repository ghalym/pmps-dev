<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_SafeBPCompare_Test" Id="{62b97377-b21f-044f-1c6b-240c0b0588d1}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_SafeBPCompare_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[BeamOffIsSafe();
BPComparisonCheck();]]></ST>
    </Implementation>
    <Method Name="BeamOffIsSafe" Id="{520a5a3b-7ba9-010a-13e2-6d130e597593}">
      <Declaration><![CDATA[//Verify beam off is considered safe.
METHOD BeamOffIsSafe
VAR_INPUT
END_VAR
VAR
	stBeamOn	:	ST_BeamParams;
	stBeamOff	:	ST_BeamParams;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stBeamOn := F_SetBeamParams(
	50, //50% attenuation is more conservative than 0
	10,
	16#FFFF,
	120);

stBeamOff := F_SetBeamParams(
	0, //0% attenuation
	10,
	16#FFFF,
	0); //0 beam rate means this bps is actually safer than BeamOn

TEST('BeamOffIsSafe');
	
AssertTrue(
	F_SafeBPCompare(stBeamOff, stBeamOn),
	'SafeBPCompare does not think beam rate = 0 is safer than anything else.'); 
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="BPComparisonCheck" Id="{c8eb9cec-e825-0eaa-0cdf-7eb32c4c8e5c}">
      <Declaration><![CDATA[//Verify BP comparison remains logical.
METHOD BPComparisonCheck
VAR_INPUT
END_VAR
VAR
	stSafer	:	ST_BeamParams;
	stNotSoSafe	:	ST_BeamParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('BPComparisonCheck');


//Attenuation
stSafer := F_SetBeamParams(
	1, //
	10,
	16#FFFF,
	1);

stNotSoSafe := F_SetBeamParams(
	0, //
	10,
	16#FFFF,
	1); 
	
AssertTrue(
	F_SafeBPCompare(stSafer, stNotSoSafe),
	'Attenuation eval is broken (True)'); 

AssertFalse(
	F_SafeBPCompare(stNotSoSafe, stSafer),
	'Attenuation eval is broken (False)');
	
	
//Rate
stSafer := F_SetBeamParams(
	0,
	10,
	16#FFFF,
	1); //

stNotSoSafe := F_SetBeamParams(
	0,
	10,
	16#FFFF,
	10); //
	
AssertTrue(
	F_SafeBPCompare(stSafer, stNotSoSafe),
	'Rate eval is broken (True)'); 

AssertFalse(
	F_SafeBPCompare(stNotSoSafe, stSafer),
	'Rate eval is broken (False)');
	
//Pulse energy
stSafer := F_SetBeamParams(
	0, 
	1, //
	16#FFFF,
	1);

stNotSoSafe := F_SetBeamParams(
	0, 
	10, //
	16#FFFF,
	1); 
	
AssertTrue(
	F_SafeBPCompare(stSafer, stNotSoSafe),
	'Pulse energy eval is broken (True)'); 

AssertFalse(
	F_SafeBPCompare(stNotSoSafe, stSafer),
	'Pulse energy eval is broken (False)');	
	
//Photon energy
//More extensive tests elsewhere
stSafer := F_SetBeamParams(
	0, 
	1, 
	2#0000_0000_0000_0110, //200-400eV
	1);
	
stSafer.reV := 300; //

stNotSoSafe := F_SetBeamParams(
	0, 
	1, 
	2#0000_0000_0000_0110, //200-400ev
	1);
	
stNotSoSafe.reV := 401;
	
AssertTrue(
	F_SafeBPCompare(stSafer, stNotSoSafe),
	'Photon energy eval is broken (True)'); 

AssertFalse(
	F_SafeBPCompare(stNotSoSafe, stSafer),
	'Photon energy eval is broken (False)');	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>