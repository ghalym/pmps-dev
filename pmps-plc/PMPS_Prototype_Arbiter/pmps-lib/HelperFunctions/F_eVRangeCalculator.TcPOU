<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="F_eVRangeCalculator" Id="{4c26bfbd-1f58-057c-1e98-dc041cbdd86b}" SpecialFunc="None">
    <Declaration><![CDATA[(*
A. Wallace 2019-8-8

Provides bit range of eV.
*)
FUNCTION F_eVRangeCalculator : WORD // Bit-range of current photon energy
VAR_INPUT
	reV	:	REAL; // Photon energy
	LastWord	:	WORD; // Range word of previous cycle
END_VAR
VAR
	nIndex: INT;
	RangeWord: WORD;
	rPreviousBoundary: REAL := 0;
	rHyst: REAL := 0.05; // <TODO> global constant
	MaxEv	:	REAL := PMPS_GVL_BeamParams.g_areVBoundaries[PMPS_GVL_BeamParams.g_cBoundaries]*1000;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF reV < 0 THEN F_eVRangeCalculator := 16#FFFF; RETURN; END_IF

FOR nIndex := 0 TO PMPS_GVL_BeamParams.g_cBoundaries DO
	
	// If previously active then check if it should be cleared
	IF LastWord.0 THEN 
		// Hysteresis condition
		IF (reV > MIN(PMPS_GVL_BeamParams.g_areVBoundaries[nIndex]*1000 + rHyst*1000, MaxEv) ) OR
		(reV < MAX(rPreviousBoundary*1000 - rHyst*1000, 0) ) THEN
			RangeWord.0 := 0; // If out of range of hys. mark inactive
		ELSE
			RangeWord.0 := 1;
		END_IF
	ELSE // Check if we should mark as active
		IF (reV <= PMPS_GVL_BeamParams.g_areVBoundaries[nIndex]*1000) AND
		(reV >= rPreviousBoundary*1000) THEN
			RangeWord.0 := 1;
		END_IF
	END_IF
	
	// Catch if the hysteresis is set too large for the range
	IF rPreviousBoundary + rHyst >= PMPS_GVL_BeamParams.g_areVBoundaries[nIndex] THEN
		RangeWord.0 := 1; // Setting the bit true here as a failsafe
		//<TODO> Add major error or warning here
	END_IF
	
	rPreviousBoundary := PMPS_GVL_BeamParams.g_areVBoundaries[nIndex];
	// Shift to next bit
	RangeWord := ROR(RangeWord, 1);
	LastWord := SHR(LastWord, 1);
	
END_FOR

F_eVRangeCalculator := RangeWord;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>