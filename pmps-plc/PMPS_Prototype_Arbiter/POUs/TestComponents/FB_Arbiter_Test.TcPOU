<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Arbiter_Test" Id="{db09e55a-38f4-0816-2f75-9c1afd6ec43c}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_Arbiter_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Arbitration();
RequestCheckRemoveBP();]]></ST>
    </Implementation>
    <Method Name="Arbitration" Id="{2b6f199f-ca1a-03e4-0a23-e2d3f0dbc445}">
      <Declaration><![CDATA[METHOD Arbitration
VAR_INPUT
END_VAR
VAR
	fbArbiter	:	FB_Arbiter;
	
 	nAttReqID	:	UDINT	:= 1;
	stAttReqBP	:	ST_BeamParams := PMPS_GVL_BeamParams.cstFullBeam;
	
	nPPEReqID	:	UDINT	:= 2;
	stPPEReqBP	:	ST_BeamParams := PMPS_GVL_BeamParams.cstFullBeam;
	
	nEVReqID	:	UDINT	:= 3;
	stEVReqBP	:	ST_BeamParams := PMPS_GVL_BeamParams.cstFullBeam;
	
	nRateReqID	:	UDINT	:= 4;
	stRateReqBP	:	ST_BeamParams := PMPS_GVL_BeamParams.cstFullBeam;
	
	stArbitratedBP	:	ST_ReqBeamParams;
	stExpectedBP	:	ST_ReqBeamParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Arbitration');

//Initialize arbiter
fbArbiter.A_Init();

stAttReqBP.fAtt := 50;
stPPEReqBP.fPP_mJ := 1;
stEVReqBP.neVReqRange := 2#1111_1100_1111_1111;
stRateReqBP.nRate := 120;

//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nAttReqID, stAttReqBP),
					'Safest attenuation request failed to load');
					
//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nPPEReqID, stPPEReqBP),
					'Safest PPE request failed to load');
					
//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nEVReqID, stEVReqBP),
					'Safest stEVReqBP request failed to load');
					
//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nRateReqID, stRateReqBP),
					'Safest stEVReqBP request failed to load');

stExpectedBP.fAtt 	:= 	stAttReqBP.fAtt;
stExpectedBP.fPP_mJ	:=  stPPEReqBP.fPP_mJ;
stExpectedBP.neVPermRange := stEVReqBP.neVReqRange;
stExpectedBP.nRate := stRateReqBP.nRate;

stArbitratedBP := fbArbiter.GetArbitratedBP();

AssertFalse(F_DiffReqBeamParams(stExpectedBP, stArbitratedBP),
				'Arbitrated BP does not match expected.');

TEST_FINISHED('');]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestCheckRemoveBP" Id="{8a012cde-0038-03e6-02ee-15f6a358c4a9}">
      <Declaration><![CDATA[METHOD RequestCheckRemoveBP
VAR_INPUT
END_VAR
VAR
	fbArbiter	:	FB_Arbiter;
	
	nId	:	DWORD := 1;
	stReq	:	ST_BeamParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbArbiter.A_Init();

TEST('RequestBP');
AssertTrue(fbArbiter.AddRequest(nId, stReq),
	'Request failed');

TEST_FINISHED('');
	
TEST('DuplicateID');
AssertFalse(fbArbiter.AddRequest(nId, stReq),
	'Duplicate request accepted, not good.');

TEST_FINISHED('');
	
TEST('CheckBP');
AssertTrue(fbArbiter.CheckRequest(nId),
	'Check failed');

TEST_FINISHED('');	
	
TEST('IDDoesNotExist');
AssertFalse(fbArbiter.CheckRequest(nId+1),
	'Check returned true when ID does not exist');

TEST_FINISHED('');
	
TEST('RemoveBP');
AssertTrue(fbArbiter.RemoveRequest(nId),
	'Remove failed');
AssertFalse(fbArbiter.CheckRequest(nId),
	'Remove did not remove request');
	
TEST_FINISHED('');]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Arbiter_Test">
      <LineId Id="9" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_Arbiter_Test.Arbitration">
      <LineId Id="47" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="115" Count="0" />
      <LineId Id="53" Count="11" />
      <LineId Id="111" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="FB_Arbiter_Test.RequestCheckRemoveBP">
      <LineId Id="185" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="213" Count="1" />
      <LineId Id="195" Count="1" />
      <LineId Id="198" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="215" Count="1" />
      <LineId Id="167" Count="3" />
      <LineId Id="217" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="179" Count="5" />
      <LineId Id="211" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>