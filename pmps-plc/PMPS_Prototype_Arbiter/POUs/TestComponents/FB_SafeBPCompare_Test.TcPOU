<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_SafeBPCompare_Test" Id="{62b97377-b21f-044f-1c6b-240c0b0588d1}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_SafeBPCompare_Test EXTENDS FB_TestSuite IMPLEMENTS I_RunnableTestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbAssert : TcUnit.FB_Assert;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="BeamOffIsSafe" Id="{520a5a3b-7ba9-010a-13e2-6d130e597593}">
      <Declaration><![CDATA[//Verify beam off is considered safe.
METHOD PRIVATE BeamOffIsSafe
VAR_INPUT
END_VAR
VAR
	stBeamOn	:	ST_BeamParams;
	stBeamOff	:	ST_BeamParams;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stBeamOn := F_SetBeamParams(
	50, //50% attenuation is more conservative than 0
	10,
	16#FFFF,
	120);

stBeamOff := F_SetBeamParams(
	0, //0% attenuation
	10,
	16#FFFF,
	0); //0 beam rate means this bps is actually safer than BeamOn

TEST('BeamOffIsSafe');
	
fbAssert.AssertTrue(
	F_SafeBPCompare(stBeamOff, stBeamOn),
	'SafeBPCompare does not think beam rate = 0 is safer than anything else.'); 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="BPComparisonCheck" Id="{c8eb9cec-e825-0eaa-0cdf-7eb32c4c8e5c}">
      <Declaration><![CDATA[//Verify BP comparison remains logical.
METHOD PRIVATE BPComparisonCheck
VAR_INPUT
END_VAR
VAR
	stSafer	:	ST_BeamParams;
	stNotSoSafe	:	ST_BeamParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('BPComparisonCheck');


//Attenuation
stSafer := F_SetBeamParams(
	1, //
	10,
	16#FFFF,
	1);

stNotSoSafe := F_SetBeamParams(
	0, //
	10,
	16#FFFF,
	1); 
	
fbAssert.AssertTrue(
	F_SafeBPCompare(stSafer, stNotSoSafe),
	'Attenuation eval is broken (True)'); 

fbAssert.AssertFalse(
	F_SafeBPCompare(stNotSoSafe, stSafer),
	'Attenuation eval is broken (False)');
	
	
//Rate
stSafer := F_SetBeamParams(
	0,
	10,
	16#FFFF,
	1); //

stNotSoSafe := F_SetBeamParams(
	0,
	10,
	16#FFFF,
	10); //
	
fbAssert.AssertTrue(
	F_SafeBPCompare(stSafer, stNotSoSafe),
	'Rate eval is broken (True)'); 

fbAssert.AssertFalse(
	F_SafeBPCompare(stNotSoSafe, stSafer),
	'Rate eval is broken (False)');
	
//Pulse energy
stSafer := F_SetBeamParams(
	0, 
	1, //
	16#FFFF,
	1);

stNotSoSafe := F_SetBeamParams(
	0, 
	10, //
	16#FFFF,
	1); 
	
fbAssert.AssertTrue(
	F_SafeBPCompare(stSafer, stNotSoSafe),
	'Pulse energy eval is broken (True)'); 

fbAssert.AssertFalse(
	F_SafeBPCompare(stNotSoSafe, stSafer),
	'Pulse energy eval is broken (False)');	
	
//Photon energy
//More extensive tests elsewhere
stSafer := F_SetBeamParams(
	0, 
	1, 
	2#0000_0000_0000_0110, //200-400eV
	1);
	
stSafer.reV := 300; //

stNotSoSafe := F_SetBeamParams(
	0, 
	1, 
	2#0000_0000_0000_0110, //200-400ev
	1);
	
stNotSoSafe.reV := 401;
	
fbAssert.AssertTrue(
	F_SafeBPCompare(stSafer, stNotSoSafe),
	'Photon energy eval is broken (True)'); 

fbAssert.AssertFalse(
	F_SafeBPCompare(stNotSoSafe, stSafer),
	'Photon energy eval is broken (False)');	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{8aa48c4d-8a08-0f03-1e55-146cd491a13e}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.RegisterTestSuite(THIS^);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunTests" Id="{a8f4034e-baee-03d9-2036-f8ef1710b75e}">
      <Declaration><![CDATA[METHOD RunTests : TCUNIT.E_TestSuiteRunState
]]></Declaration>
      <Implementation>
        <ST><![CDATA[BeamOffIsSafe();
BPComparisonCheck();

RunTests := TcUnit.E_TestSuiteRunState.FINISHED;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SafeBPCompare_Test">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SafeBPCompare_Test.BeamOffIsSafe">
      <LineId Id="64" Count="9" />
      <LineId Id="22" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="FB_SafeBPCompare_Test.BPComparisonCheck">
      <LineId Id="78" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="64" Count="9" />
      <LineId Id="22" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="85" Count="1" />
      <LineId Id="88" Count="18" />
      <LineId Id="87" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="110" Count="18" />
      <LineId Id="108" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="132" Count="4" />
      <LineId Id="150" Count="1" />
      <LineId Id="137" Count="5" />
      <LineId Id="153" Count="1" />
      <LineId Id="143" Count="6" />
      <LineId Id="130" Count="0" />
      <LineId Id="109" Count="0" />
    </LineIds>
    <LineIds Name="FB_SafeBPCompare_Test.FB_init">
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_SafeBPCompare_Test.RunTests">
      <LineId Id="4" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>