<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_BPTM_Test" Id="{133fabf5-7f1b-0226-02c8-8a8094610674}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_BPTM_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[BPTMBasicFunction();]]></ST>
    </Implementation>
    <Method Name="BPTMBasicFunction" Id="{98536ebe-b9e5-0115-158c-f5a26516eddb}">
      <Declaration><![CDATA[METHOD BPTMBasicFunction
VAR_INPUT
END_VAR
VAR
	fbBPTM	:	BeamParameterTransitionManager;
	fbArbiter	:	FB_Arbiter;
	
	//Final and transition assertions
	nTransitionID	:	UDINT := 1;
	stTransitionAssertion	:	ST_BeamParams := PMPS_GVL_BeamParams.cstSafeBeam;
	
 	nReqID	:	UDINT	:= 2;
	stReqAssertion	:	ST_BeamParams := PMPS_GVL_BeamParams.cstSafeBeam;
	
	fbMachine	:	FB_MachineSimulator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Initialize arbiter
fbArbiter.A_Init();

//Call BPTM with requested final state and transition state
fbBPTM(
	fbArbiter := fbArbiter,
	i_TransitionAssertionID := nTransitionID,
	i_stTransitionAssertion := stTransitionAssertion,
	
	i_nRequestedAssertionID := nReqID,
	i_stRequestedAssertion := stReqAssertion
);

TEST('BPTMAssertsTransitionBeforeFinal');
	
//Second pass should move into waiting for transition assertion, arbiter should have transition id
fbBPTM(fbArbiter:= fbArbiter);

AssertTrue(
	fbBPTM.UML_SC_BeamParameterTransitionManager.States[fbBPTM.UML_SC_BeamParameterTransitionManager.Names.WaitingForTransitionAssertion].Active,
	'BPTM did not move into Waiting for transition assertion'); 
	

AssertTrue(fbArbiter.CheckRequest(nTransitionID), 'Arbiter did not accept BPTM transition assertion');


TEST('BPTM: Arbiter Only Has Transition');
AssertTrue(fbArbiter.CheckRequest(nTransitionID),
	'Arbiter does not have transition assertion.');
	
TEST('BPTM waits for transition BP');	
AssertFalse(fbArbiter.CheckRequest(nReqID),
	'Arbiter already has final ID before transition conditions are met');
	
AssertFalse(fbBPTM.q_xTransitionAuthorized,
	'Transition should not be authorized until the arbiter has final assertion');

TEST('BPTM Requests Final');
fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);
fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);

fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);
fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);
fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);

fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);
fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);
fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);
	
fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);
fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);
fbBPTM(fbArbiter := fbArbiter,
	stCurrentBeamParameters := stTransitionAssertion);
	
AssertTrue(fbArbiter.CheckRequest(nReqID),
	'Final assertion should be in arbiter');
	
TEST('BPTM Authorizes Transition');
AssertTrue(fbBPTM.q_xTransitionAuthorized,
	'Transition should be authorized at this point');
	
TEST('BPTM Current assertion id is set');
AssertEquals(nReqID, fbBPTM.nCurrentAssertionID,
	'nCurrentAssertionID not set.');
	
TEST('BPTM Transition Deauthorized');
fbBPTM(fbArbiter := fbArbiter,
		i_xDoneMoving := TRUE);
AssertFalse(fbBPTM.q_xTransitionAuthorized,
	'Transition authorization should go away when done moving');
	
TEST('BPTM Transition BP request removed');
AssertFalse(fbArbiter.CheckRequest(nTransitionID),
	'Transition ID still in arbiter');
	
//Basic testing is complete, interruption functionality testing next
//Continuing to use the same BPTM because internal variable nCurrentAssertionID is now non-zero

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_BPTM_Test">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_BPTM_Test.BPTMBasicFunction">
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="5" />
      <LineId Id="22" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="38" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="3" />
      <LineId Id="30" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="97" Count="2" />
      <LineId Id="85" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="91" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="160" Count="4" />
      <LineId Id="154" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="167" Count="4" />
      <LineId Id="166" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="94" Count="2" />
      <LineId Id="100" Count="1" />
      <LineId Id="115" Count="3" />
      <LineId Id="102" Count="2" />
      <LineId Id="107" Count="0" />
      <LineId Id="105" Count="1" />
      <LineId Id="108" Count="6" />
      <LineId Id="87" Count="0" />
      <LineId Id="86" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>