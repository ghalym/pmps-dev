<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_BPTM_Test" Id="{133fabf5-7f1b-0226-02c8-8a8094610674}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_BPTM_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[BPTMBasicFunction();]]></ST>
    </Implementation>
    <Method Name="BPTMBasicFunction" Id="{98536ebe-b9e5-0115-158c-f5a26516eddb}">
      <Declaration><![CDATA[METHOD BPTMBasicFunction
VAR_INPUT
END_VAR
VAR	
	//Final and transition assertions
	nTransitionID	:	UDINT := 1;
	stTransitionAssertion	:	ST_BeamParams := PMPS_GVL_BeamParams.cstSafeBeam;
	
 	nReqID	:	UDINT	:= 2;
	stReqAssertion	:	ST_BeamParams := PMPS_GVL_BeamParams.cstSafeBeam;
	
	fbMachine	:	FB_MachineSimulator;	
	
END_VAR
VAR_INST
	fbBPTM_TestBasicFunction	:	BeamParameterTransitionManager;
	fbArbiter	:	FB_Arbiter;
	xFirstPass	:	BOOL := TRUE;
	eTestStep: eBPTMTestStates := eBPTMTestStates.Init;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eTestStep OF

eBPTMTestStates.Init:
	fbArbiter.A_Init();
	
	eTestStep := eBPTMTestStates.WaitingForTransitionAssertion;

eBPTMTestStates.WaitingForTransitionAssertion:
	TEST('BPTMBasicFunction');
	
	//Call BPTM with requested final state and transition state
	fbBPTM_TestBasicFunction(
		fbArbiter := fbArbiter,
		i_TransitionAssertionID := nTransitionID,
		i_stTransitionAssertion := stTransitionAssertion,
		
		i_nRequestedAssertionID := nReqID,
		i_stRequestedAssertion := stReqAssertion
	);
	
	IF fbBPTM_TestBasicFunction.UML_SC_BeamParameterTransitionManager.States
	[fbBPTM_TestBasicFunction.UML_SC_BeamParameterTransitionManager.Names.WaitingForTransitionAssertion].Active THEN
	
		AssertTrue(fbArbiter.CheckRequest(nTransitionID), 'Arbiter did not accept BPTM transition assertion');
		
		AssertFalse(fbArbiter.CheckRequest(nReqID), 'Arbiter has requested too early.');
				
		AssertFalse(fbBPTM_TestBasicFunction.q_xTransitionAuthorized,
			'Transition should not be authorized until the arbiter has final assertion');
			
		TEST_FINISHED();
		
		eTestStep := eBPTMTestStates.WaitingForFinalAssertion;
	END_IF

eBPTMTestStates.WaitingForFinalAssertion:

	TEST('BPTM Requests Final');
	fbBPTM_TestBasicFunction(fbArbiter := fbArbiter,
		stCurrentBeamParameters := stTransitionAssertion);
	
	IF fbBPTM_TestBasicFunction.UML_SC_BeamParameterTransitionManager.States
	[fbBPTM_TestBasicFunction.UML_SC_BeamParameterTransitionManager.Names.WaitingForFinalAssertion].Active THEN
	
		AssertTrue(fbArbiter.CheckRequest(nReqID),
			'Transition assertion should be in arbiter');
		
		AssertTrue(fbArbiter.CheckRequest(nReqID),
			'Final assertion should be in arbiter');
			
		AssertFalse(fbBPTM_TestBasicFunction.q_xTransitionAuthorized,
			'Transition should not be authorized until the arbiter has final assertion');
			
		TEST_FINISHED();
	
		eTestStep := eBPTMTestStates.Transitioning;
	END_IF

eBPTMTestStates.Transitioning:
	TEST('BPTM Authorizes Transition');
	fbBPTM_TestBasicFunction(fbArbiter := fbArbiter,
		stCurrentBeamParameters := stTransitionAssertion);
		
	IF fbBPTM_TestBasicFunction.UML_SC_BeamParameterTransitionManager.States
	[fbBPTM_TestBasicFunction.UML_SC_BeamParameterTransitionManager.Names.Transitioning].Active THEN
	
		AssertTrue(fbArbiter.CheckRequest(nReqID),
			'Transition assertion should be in arbiter');
		
		AssertTrue(fbArbiter.CheckRequest(nReqID),
			'Final assertion should be in arbiter');
			
		AssertTrue(fbBPTM_TestBasicFunction.q_xTransitionAuthorized,
			'Transition should be authorized at this point.');
			
		AssertEquals(nReqID, fbBPTM_TestBasicFunction.nCurrentAssertionID,
			'nCurrentAssertionID not set.');
	
		TEST_FINISHED();
	END_IF

eBPTMTestStates.CleaningUp:	
	
END_CASE
(*	
TEST('BPTM Authorizes Transition');
AssertTrue(fbBPTM.q_xTransitionAuthorized,
	'Transition should be authorized at this point');
TEST_FINISHED();
	
TEST('BPTM Current assertion id is set');
AssertEquals(nReqID, fbBPTM.nCurrentAssertionID,
	'nCurrentAssertionID not set.');
TEST_FINISHED();
	
TEST('BPTM Transition Deauthorized');
fbBPTM(fbArbiter := fbArbiter,
		i_xDoneMoving := TRUE);
AssertFalse(fbBPTM.q_xTransitionAuthorized,
	'Transition authorization should go away when done moving');
TEST_FINISHED();
	
TEST('BPTM Transition BP request removed');
AssertFalse(fbArbiter.CheckRequest(nTransitionID),
	'Transition ID still in arbiter');
	
//Basic testing is complete, interruption functionality testing next
//Continuing to use the same BPTM because internal variable nCurrentAssertionID is now non-zero

TEST_FINISHED();*)]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_BPTM_Test">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_BPTM_Test.BPTMBasicFunction">
      <LineId Id="322" Count="0" />
      <LineId Id="326" Count="2" />
      <LineId Id="331" Count="1" />
      <LineId Id="330" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="334" Count="9" />
      <LineId Id="211" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="317" Count="1" />
      <LineId Id="213" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="225" Count="1" />
      <LineId Id="234" Count="2" />
      <LineId Id="379" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="314" Count="2" />
      <LineId Id="238" Count="3" />
      <LineId Id="297" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="351" Count="1" />
      <LineId Id="350" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="347" Count="2" />
      <LineId Id="268" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="359" Count="1" />
      <LineId Id="358" Count="0" />
      <LineId Id="361" Count="3" />
      <LineId Id="368" Count="3" />
      <LineId Id="367" Count="0" />
      <LineId Id="372" Count="5" />
      <LineId Id="366" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="272" Count="24" />
      <LineId Id="86" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>